//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2251
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MySql.Data.MySqlClient.Tests {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetTest : DataSet {
        
        private DateTestDataTable tableDateTest;
        
        public DataSetTest() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetTest(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DateTest"] != null)) {
                    this.Tables.Add(new DateTestDataTable(ds.Tables["DateTest"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DateTestDataTable DateTest {
            get {
                return this.tableDateTest;
            }
        }
        
        public override DataSet Clone() {
            DataSetTest cln = ((DataSetTest)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DateTest"] != null)) {
                this.Tables.Add(new DateTestDataTable(ds.Tables["DateTest"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDateTest = ((DateTestDataTable)(this.Tables["DateTest"]));
            if ((this.tableDateTest != null)) {
                this.tableDateTest.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetTest";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dstest.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDateTest = new DateTestDataTable();
            this.Tables.Add(this.tableDateTest);
        }
        
        private bool ShouldSerializeDateTest() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DateTestRowChangeEventHandler(object sender, DateTestRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DateTestDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columndt;
            
            internal DateTestDataTable() : 
                    base("DateTest") {
                this.InitClass();
            }
            
            internal DateTestDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn dtColumn {
                get {
                    return this.columndt;
                }
            }
            
            public DateTestRow this[int index] {
                get {
                    return ((DateTestRow)(this.Rows[index]));
                }
            }
            
            public event DateTestRowChangeEventHandler DateTestRowChanged;
            
            public event DateTestRowChangeEventHandler DateTestRowChanging;
            
            public event DateTestRowChangeEventHandler DateTestRowDeleted;
            
            public event DateTestRowChangeEventHandler DateTestRowDeleting;
            
            public void AddDateTestRow(DateTestRow row) {
                this.Rows.Add(row);
            }
            
            public DateTestRow AddDateTestRow(int id, System.DateTime dt) {
                DateTestRow rowDateTestRow = ((DateTestRow)(this.NewRow()));
                rowDateTestRow.ItemArray = new object[] {
                        id,
                        dt};
                this.Rows.Add(rowDateTestRow);
                return rowDateTestRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DateTestDataTable cln = ((DateTestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DateTestDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columndt = this.Columns["dt"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columndt = new DataColumn("dt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndt);
            }
            
            public DateTestRow NewDateTestRow() {
                return ((DateTestRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DateTestRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DateTestRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DateTestRowChanged != null)) {
                    this.DateTestRowChanged(this, new DateTestRowChangeEvent(((DateTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DateTestRowChanging != null)) {
                    this.DateTestRowChanging(this, new DateTestRowChangeEvent(((DateTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DateTestRowDeleted != null)) {
                    this.DateTestRowDeleted(this, new DateTestRowChangeEvent(((DateTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DateTestRowDeleting != null)) {
                    this.DateTestRowDeleting(this, new DateTestRowChangeEvent(((DateTestRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDateTestRow(DateTestRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DateTestRow : DataRow {
            
            private DateTestDataTable tableDateTest;
            
            internal DateTestRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDateTest = ((DateTestDataTable)(this.Table));
            }
            
            public int id {
                get {
                    try {
                        return ((int)(this[this.tableDateTest.idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDateTest.idColumn] = value;
                }
            }
            
            public System.DateTime dt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDateTest.dtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDateTest.dtColumn] = value;
                }
            }
            
            public bool IsidNull() {
                return this.IsNull(this.tableDateTest.idColumn);
            }
            
            public void SetidNull() {
                this[this.tableDateTest.idColumn] = System.Convert.DBNull;
            }
            
            public bool IsdtNull() {
                return this.IsNull(this.tableDateTest.dtColumn);
            }
            
            public void SetdtNull() {
                this[this.tableDateTest.dtColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DateTestRowChangeEvent : EventArgs {
            
            private DateTestRow eventRow;
            
            private DataRowAction eventAction;
            
            public DateTestRowChangeEvent(DateTestRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DateTestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
