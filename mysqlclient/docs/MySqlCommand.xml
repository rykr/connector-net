<docs>
<ClassSummary>
	<summary>Represents a SQL statement to execute against a MySQL database. This class cannot be inherited.</summary>
	<remarks>
	<B>MySqlCommand</B> features the following methods for executing commands at a MySQL database:
	<list type="table">
		<listheader><term>Item</term><term>Description</term></listheader>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteReader_overloads.html">ExecuteReader</a></term>
			<description>Executes commands that return rows.</description>
		</item>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery.html">ExecuteNonQuery</a></term>
			<description>Executes commands such as SQL INSERT, DELETE, and UPDATE statements.</description>
		</item>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteScalar.html">ExecuteScalar</a></term>
			<description>Retrieves a single value (for example, an aggregate value) from a database.</description>
		</item>
	</list>

	You can reset the <B>CommandText</B> property and reuse the <B>MySqlCommand</B> 
	object. However, you must close the <A 
	href="MySql.Data.MySqlClient.MySqlDataReader.html">MySqlDataReader</A> 
	before you can execute a new or previous command.

	If a <A href="MySql.Data.MySqlClient.MySqlException.html">MySqlException</A> is 
	generated by the method executing a <B>MySqlCommand</B>, the <A 
	href="MySql.Data.MySqlClient.MySqlConnection.html">MySqlConnection</A> 
	remains open.  It is the responsibility of the programmer to close the connection.
	
	<note>
	Prior versions of the provider used the '@' symbol to mark parameters in SQL.  This is incompatible
	with MySQL user variables, so the provider now uses the '?' symbol to locate parameters in SQL.  To
	support older code, you can set 'old syntax=yes' on your connection string.  If you do this, please
	be aware that an exception will not be throw if you fail to define a parameter that  you intended to
	use in your SQL.
	</note>
	</remarks>

	<example>
		The following example creates a <A href="frlrfsystemdatasqlclientsqlcommandclasstopic.htm">MySqlCommand</A> and 
		a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the <A 
		href="frlrfsystemdatasqlclientsqlcommandclassconnectiontopic.htm">Connection</A> 
		for the <B>MySqlCommand</B>. The example then calls <A 
		href="frlrfsystemdatasqlclientsqlcommandclassexecutenonquerytopic.htm">ExecuteNonQuery</A>, 
		and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is 
		passed a connection string and a query string that is a SQL INSERT 
		statement.
		<code lang="Visual Basic">
	Public Sub InsertRow(myConnectionString As String)
		' If the connection string is null, use a default.
		If myConnectionString = "" Then
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
		End If
		Dim myConnection As New MySqlConnection(myConnectionString)
		Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
		Dim myCommand As New MySqlCommand(myInsertQuery)
		myCommand.Connection = myConnection
		myConnection.Open()
		myCommand.ExecuteNonQuery()
		myCommand.Connection.Close()
	End Sub
		</code>
		<code lang="C#">
	public void InsertRow(string myConnectionString) 
	{
		// If the connection string is null, use a default.
		if(myConnectionString == "") 
		{
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
		}
		MySqlConnection myConnection = new MySqlConnection(myConnectionString);
		string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
		MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
		myCommand.Connection = myConnection;
		myConnection.Open();
		myCommand.ExecuteNonQuery();
		myCommand.Connection.Close();
	}
		</code>
	</example>
</ClassSummary>


<ExecuteReader>
	<summary>Overloaded. Sends the CommandText to the Connection and builds a MySqlDataReader.</summary>
	<returns></returns>
	<overloads></overloads>
</ExecuteReader>

<ExecuteReader1>
	<summary>Overloaded. Sends the CommandText to the Connection and builds a MySqlDataReader.</summary>
	<parameter name="behavior"></parameter>
	<remarks>
		<note>
		When calling ExecuteReader with the SingleRow behavior, you should be aware that using a <i>limit</i> 
		clause in your SQL will cause all rows (up to the limit given) to be retrieved by the client.  The 
		<see cref="MySqlDataReader.Read"/> method will still return false after the first row but pulling all rows of data
		into the client will have a performance impact.  If the <i>limit</i> clause is not necessary, it should 
		be avoided.
		</note>
	</remarks>
	<returns></returns>
</ExecuteReader1>

</docs>